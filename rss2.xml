<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>胜哥爱周周</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>仰望星空，脚踏实地</description>
    <pubDate>Sun, 05 Mar 2023 05:57:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>STM32定时器</title>
      <link>http://example.com/2023/03/05/STM32%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <guid>http://example.com/2023/03/05/STM32%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <pubDate>Sun, 05 Mar 2023 03:01:59 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-0-STM32中断的分类&quot;&gt;&lt;a href=&quot;#1-0-STM32中断的分类&quot; class=&quot;headerlink&quot; title=&quot;1.0-STM32中断的分类&quot;&gt;&lt;/a&gt;1.0-STM32中断的分类&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://blog</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-0-STM32中断的分类"><a href="#1-0-STM32中断的分类" class="headerlink" title="1.0-STM32中断的分类"></a>1.0-STM32中断的分类</h1><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/cd437d820960af95c81bb3af04652bb.png"></p><h1 id="2-0-SysTick定时器"><a href="#2-0-SysTick定时器" class="headerlink" title="2.0-SysTick定时器"></a>2.0-SysTick定时器</h1><h2 id="2-1-SysTick定时器概念及工作原理"><a href="#2-1-SysTick定时器概念及工作原理" class="headerlink" title="2.1-SysTick定时器概念及工作原理"></a>2.1-SysTick定时器概念及工作原理</h2><p><strong>SysTick定时器概念：</strong>SysTick定时器(又名系统滴答定时器)是存在于Cortex-M3的一个定时器，只要是ARM Cotex-M系列内核的MCU都包含这个定时器。使用内核的SysTick定时器来实现延时，可以不占用系统定时器，节约资源。由于SysTick是在CPU核内部实现的，跟MCU外设无关，因此它的代码可以在不同厂家之间移植，因为ST这类厂商都是使用的ARM公司设计的内核，所以虽然外设各有不同，但是内核都是一样的，那么存在于内核的SysTick定时器的相关代码自然可以相互移植。<br><strong>工作原理：</strong>SysTick定时器是一个24位递减定时器，即计数器可以从最大值$2^{24}$开始，每个时钟周期减1，当减到0时，会产生Systick异常，同时再自动重载定时初值，开始新一轮计数。通过设置这个定时初值，就可以实现得到指定时间。  </p><h2 id="2-2-计时时间计算"><a href="#2-2-计时时间计算" class="headerlink" title="2.2-计时时间计算"></a>2.2-计时时间计算</h2><p><strong>t：</strong>一个计数循环时间，跟reload(重装载值)和CLK(系统时钟)有关。<br><strong>CLK：</strong>72M或者9M，由CTRL寄存器配置。<br>*<em>RELOAD:<em><em>24位，用户自己设置，范围为0~$2^{24}$<br>t&#x3D;reload</em>(1&#x2F;CLK)<br>CLK&#x3D;72M时，t&#x3D;72</em>(1&#x2F;72M)&#x3D;1us<br>CLK&#x3D;72M时，t&#x3D;72000</em>(1&#x2F;72M)&#x3D;1ms<br><strong>时间单位换算：</strong><br>1s&#x3D;1000ms&#x3D;1000 000us&#x3D;1000 000 000nm  </p><h2 id="2-3-SysTick定时器的寄存器"><a href="#2-3-SysTick定时器的寄存器" class="headerlink" title="2.3-SysTick定时器的寄存器"></a>2.3-SysTick定时器的寄存器</h2><p>SysTick—系统定时器有4个寄存器，简要介绍如下。在使用SysTick产生定时的时候，只需要配置前三个寄存器，最后一个校准寄存器不需要使用。在core_cm3.h文件中将所涉及到的寄存器包装成一个结构体。</p><pre><code>typedef struct&#123;  __IO uint32_t CTRL;      /*!&lt; Offset: 0x00  SysTick Control and Status Register */控制及状态寄存器  __IO uint32_t LOAD;      /*!&lt; Offset: 0x04  SysTick Reload Value Register       */重装载数值寄存器  __IO uint32_t VAL;       /*!&lt; Offset: 0x08  SysTick Current Value Register      */当前数值寄存器  __I  uint32_t CALIB;     /*!&lt; Offset: 0x0C  SysTick Calibration Register        */校准寄存器&#125; SysTick_Type;</code></pre><h3 id="2-3-1-系统滴答定时器控制和状态寄存器（STK-CTRL）"><a href="#2-3-1-系统滴答定时器控制和状态寄存器（STK-CTRL）" class="headerlink" title="2.3.1 系统滴答定时器控制和状态寄存器（STK_CTRL）"></a>2.3.1 系统滴答定时器控制和状态寄存器（STK_CTRL）</h3><p>重点关注Bit[0]，用于使能系统滴答定时器，Bit[1]使能系统滴答定时器中断，Bit[2]系统滴答时钟的时钟来源。<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%92%8C%E7%8A%B6%E6%80%81%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88STK_CTRL%EF%BC%89.png"></p><h3 id="2-3-2-系统滴答定时器加载值寄存器（STK-LOAD）"><a href="#2-3-2-系统滴答定时器加载值寄存器（STK-LOAD）" class="headerlink" title="2.3.2-系统滴答定时器加载值寄存器（STK_LOAD）"></a>2.3.2-系统滴答定时器加载值寄存器（STK_LOAD）</h3><p>Bit[23:0]，一共24位，用来设置系统滴答定时器的初始值，因此范围为1~ 16777216<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E5%8A%A0%E8%BD%BD%E5%80%BC%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88STK_LOAD%EF%BC%89.png"></p><h3 id="2-3-3-系统滴答定时器当前值寄存器（STK-VAL）"><a href="#2-3-3-系统滴答定时器当前值寄存器（STK-VAL）" class="headerlink" title="2.3.3-系统滴答定时器当前值寄存器（STK_VAL）"></a>2.3.3-系统滴答定时器当前值寄存器（STK_VAL）</h3><p>Bit[23:0]，一共24位，用来获取当前系统滴答定时器的计数值。<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E5%BD%93%E5%89%8D%E5%80%BC%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88STK_VAL%EF%BC%89.png"></p><h3 id="2-3-4-系统滴答定时器校准值寄存器（STK-CALIB）"><a href="#2-3-4-系统滴答定时器校准值寄存器（STK-CALIB）" class="headerlink" title="2.3.4-系统滴答定时器校准值寄存器（STK_CALIB）"></a>2.3.4-系统滴答定时器校准值寄存器（STK_CALIB）</h3><p>这个寄存器没用到，可以不用管。此外，当处理器在调试期间被暂停（halt）时，系统滴答定时器也将暂停运作。<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/%E7%B3%BB%E7%BB%9F%E6%BB%B4%E7%AD%94%E5%AE%9A%E6%97%B6%E5%99%A8%E6%A0%A1%E5%87%86%E5%80%BC%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88STK_CALIB%EF%BC%89.png"></p><h2 id="2-4-系统滴答定时器配置函数"><a href="#2-4-系统滴答定时器配置函数" class="headerlink" title="2.4-系统滴答定时器配置函数"></a>2.4-系统滴答定时器配置函数</h2><p>在core_cm3.h文件中已经定义好了系统滴答定时器配置函数，我们在编写延时函数时直接调用就行，现在分析一下这个配置函数。</p><pre><code>static __INLINE uint32_t SysTick_Config(uint32_t ticks)   &#123; //判断输入的ticks是否超过$2^&#123;24&#125;$  if (ticks &gt; SysTick_LOAD_RELOAD_Msk)  return (1);            //配置reload寄存器的初始值                                                                SysTick-&gt;LOAD  = (ticks &amp; SysTick_LOAD_RELOAD_Msk) - 1;//配置中断优先级为 1&lt;&lt;4-1=15,优先级最低        NVIC_SetPriority (SysTick_IRQn, (1&lt;&lt;__NVIC_PRIO_BITS) - 1); //配置counter 计数器的值  SysTick-&gt;VAL   = 0;   //配置systick的时钟为72M//使能中断//使能systick                                         SysTick-&gt;CTRL  = SysTick_CTRL_CLKSOURCE_Msk |                    SysTick_CTRL_TICKINT_Msk   |                    SysTick_CTRL_ENABLE_Msk;                    return (0);                                                 &#125;</code></pre><p><strong>static的作用是什么？：</strong><br>在函数的返回类型前加上关键字static，函数就被定义成为静态函数。函数的定义和声明默认情况下是extern的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用。定义静态函数的好处：<br>&lt;1&gt; 其他文件中可以定义相同名字的函数，不会发生冲突<br>&lt;2&gt; 静态函数不能被其他文件所用。<br><strong>ul是什么意思？</strong><br>SysTick_LOAD_RELOAD_Msk在core_cm3.h文件中是如下定义的</p><pre><code>#define SysTick_LOAD_RELOAD_Pos    0                                           /*!&lt; SysTick LOAD: RELOAD Position */#define SysTick_LOAD_RELOAD_Msk    (0xFFFFFFul &lt;&lt; SysTick_LOAD_RELOAD_Pos)     /*!&lt; SysTick LOAD: RELOAD Mask */</code></pre><p>注意这里的表示常量类型的方法，就是放后面的；定义变量放前面。“u”表示“unsigned”，无符号“l”表示“long”，长整型。如果不加UL的话那就是默认的int型，ul后缀.也是一种强制转换方式。<br><strong>为什么要用两次宏定义来完成寄存器某几位的赋值？</strong><br>我们以”SysTick_CTRL_CLKSOURCE_Msk”为例，找到它对应的宏定义：</p><pre><code>#define SysTick_CTRL_CLKSOURCE_Pos          2                                          #define SysTick_CTRL_CLKSOURCE_Msk         (1ul &lt;&lt; SysTick_CTRL_CLKSOURCE_Pos)   </code></pre><p>这里的”SysTick_CTRL_CLKSOURCE_Pos “ 表示的是CLKSOURCE在SysTick的CTRL寄存器中的位置，第2位。然后我们把要写入的值1（目的是采用AHB的72M时钟源）左移相应的2位（CLKSOURCE在CTRL寄存器中的位置）。这样做的好处就是方便我们在给CTRL寄存器写值的时候能恰好写在对应的位数上而不改变其他位数的值，这也就是后面为什么会连续两个按位或”|” 。<br><strong>为什么配置reload寄存器的初始值要减一？</strong><br>因为将重装载值写入reload也需要一个时间，所以减一。<br><strong>注意：</strong><br>这里使用了中断源SysTick_IRQn，所以必须包含头文件stm32f10x.h。</p><h2 id="2-5-微秒-x2F-毫秒级延时函数-未使用中断函数"><a href="#2-5-微秒-x2F-毫秒级延时函数-未使用中断函数" class="headerlink" title="2.5-微秒&#x2F;毫秒级延时函数(未使用中断函数)"></a>2.5-微秒&#x2F;毫秒级延时函数(未使用中断函数)</h2><p>couter 减1的时间 等于 1&#x2F;systick_clk，当counter 从 reload 的值减小到0的时候，为一个循环，如果开启了中断则执行中断服务程序，同时 CTRL 的 countflag 位会置1，这一个循环的时间为 reload * (1&#x2F;systick_clk)<br><strong>微秒级延时函数：</strong>  </p><pre><code>void SysTick_Delay_Us( __IO uint32_t us)&#123;    uint32_t i;    SysTick_Config(SystemCoreClock/1000000);        for(i=0;i&lt;us;i++)    &#123;// 当计数器的值减小到0的时候，CRTL寄存器的第16位会置1,否1就是0，//此时跳出while循环，for语句中i＋1，进入下一个计数周期        while( !((SysTick-&gt;CTRL)&amp;(1&lt;&lt;16)) );    &#125;    // 关闭SysTick定时器    SysTick-&gt;CTRL &amp;=~SysTick_CTRL_ENABLE_Msk;&#125; </code></pre><p><strong>毫秒级延时函数：</strong></p><pre><code>void SysTick_Delay_Us( __IO uint32_t ms)&#123;    uint32_t i;    SysTick_Config(SystemCoreClock/1000);        for(i=0;i&lt;ms;i++)    &#123;        // 当计数器的值减小到0的时候，CRTL寄存器的位16会置1        while( !((SysTick-&gt;CTRL)&amp;(1&lt;&lt;16)) );    &#125;    // 关闭SysTick定时器    //这里的&quot;&amp;=&quot;之间不能有空格，&quot;&amp; =&quot;这种写法是错误的    SysTick-&gt;CTRL &amp;=~SysTick_CTRL_ENABLE_Msk;&#125;</code></pre><p><strong>注意：</strong><br><strong>&lt;1&gt;</strong>  stm32f10x.h文件要在core_cm3.h文件之前包含，即如下顺序：</p><pre><code>#include &quot;stm32f10x.h&quot; #include &quot;core_cm3.h&quot;</code></pre><h2 id="2-6-微秒-x2F-毫秒级延时函数-使用中断函数"><a href="#2-6-微秒-x2F-毫秒级延时函数-使用中断函数" class="headerlink" title="2.6-微秒&#x2F;毫秒级延时函数(使用中断函数)"></a>2.6-微秒&#x2F;毫秒级延时函数(使用中断函数)</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2023/03/05/STM32%E5%AE%9A%E6%97%B6%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>中断</title>
      <link>http://example.com/2023/03/03/%E4%B8%AD%E6%96%AD/</link>
      <guid>http://example.com/2023/03/03/%E4%B8%AD%E6%96%AD/</guid>
      <pubDate>Fri, 03 Mar 2023 07:31:39 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-0-中断&quot;&gt;&lt;a href=&quot;#1-0-中断&quot; class=&quot;headerlink&quot; title=&quot;1.0-中断&quot;&gt;&lt;/a&gt;1.0-中断&lt;/h1&gt;&lt;h2 id=&quot;1-1-中断概念&quot;&gt;&lt;a href=&quot;#1-1-中断概念&quot; class=&quot;headerlink&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-0-中断"><a href="#1-0-中断" class="headerlink" title="1.0-中断"></a>1.0-中断</h1><h2 id="1-1-中断概念"><a href="#1-1-中断概念" class="headerlink" title="1.1-中断概念"></a>1.1-中断概念</h2><p>打断cpu正常执行程序，转而处理紧急程序，然后返回原暂停的程序继续运行，就叫做中断。</p><h2 id="1-2-中断的作用和意义"><a href="#1-2-中断的作用和意义" class="headerlink" title="1.2-中断的作用和意义"></a>1.2-中断的作用和意义</h2><p>1、实时控制：在确定时间内对相应事件做出相应，如：温度控制。可以设置定时器，在设置的时间间隔读取温度，设置的时间越短，则实时性越高。<br>2、故障处理：检测到故障，需要第一时间停下当前执行的程序而去处理故障，故障处理完毕再回到原来的程序停止处继续执行。<br>3、数据传输：不确定数据何时会传来，不能占用CPU空转一直等待数据传输过来，而是当数据传输过来时设置中断。如：串口数据接收。<br>4、中断的意义：高效处理紧急程序，并不会一直占用CPU资源。</p><h2 id="STM32-GPIO外部中断简图"><a href="#STM32-GPIO外部中断简图" class="headerlink" title="STM32 GPIO外部中断简图"></a>STM32 GPIO外部中断简图</h2><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/01ae2009aeab7f2ae8dcc8a98bb23f9.png"></p><h1 id="2-0-NVIC"><a href="#2-0-NVIC" class="headerlink" title="2.0-NVIC"></a>2.0-NVIC</h1><h2 id="2-1-NVIC的基本概念"><a href="#2-1-NVIC的基本概念" class="headerlink" title="2.1-NVIC的基本概念"></a>2.1-NVIC的基本概念</h2><p>Nested vectored interrupt controller,嵌套向量中断控制器，属于内核(M3&#x2F;4&#x2F;7)。NVIC支持：256个中断（16内核+240外部），支持：256个优先级，允许剪裁。每个中断都对应一个中断服务函数，中断服务函数是用来处理中断的，中断服务函数的名称不能任意起名，它存在于中断向量列表中，startup_stm32f10x_hd.s(启动文件)上有相应的定义。它是一种弱定义，也就是在.c文件中有同样中断函数名的定义，则执行.c文件中的函数，若.c文件中没有相应的函数名定义或者定义错误，则中断发生时，执行这个.s文件的中断服务函数。<br>中断向量表：定义一块固定的内存，以4字节对齐，存放各个中断服务函数的首地址，中断向量表定义在启动文件中，当中断发生时，CPU会自动执行对应的中断服务函数。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/63a40802034218baec7a676423c23c3.png"></p><h2 id="2-2-NVIC相关寄存器介绍"><a href="#2-2-NVIC相关寄存器介绍" class="headerlink" title="2.2-NVIC相关寄存器介绍"></a>2.2-NVIC相关寄存器介绍</h2><table><thead><tr><th align="center">NVIC相关寄存器</th><th align="center">位数</th><th align="center">寄存器个数</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">中断使能寄存器(ISER)</td><td align="center">32</td><td align="center">8</td><td align="center">每一位控制一个中断</td></tr><tr><td align="center">中断除能寄存器(ICRE)</td><td align="center">32</td><td align="center">8</td><td align="center">每一位控制一个中断</td></tr><tr><td align="center">应用程序中断及复位控制寄存器(AIRCR)</td><td align="center">32</td><td align="center">1</td><td align="center">位[10:8]控制优先级分组</td></tr><tr><td align="center">中断优先级寄存器(IPR)</td><td align="center">8</td><td align="center">240</td><td align="center">8个位对应一个中断，而STM32只使用高4位</td></tr></tbody></table><p>除此之外，NVIC还有其他的功能如：中断挂起、解挂、激活标志等非常用功能。</p><h2 id="2-3-NVIC工作原理"><a href="#2-3-NVIC工作原理" class="headerlink" title="2.3-NVIC工作原理"></a>2.3-NVIC工作原理</h2><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/9470095f2fbb1c67c149dcc71ab8448.png"></p><h2 id="2-4-STM32中断优先级基本概念"><a href="#2-4-STM32中断优先级基本概念" class="headerlink" title="2.4-STM32中断优先级基本概念"></a>2.4-STM32中断优先级基本概念</h2><p>1、抢占优先级(pre):高抢占优先级可以打断正在执行的低抢占优先级中断（嵌套），数字越低优先级越高。<br>2、相应优先级(sub):当抢占优先级相同时，响应优先级高的先执行，但不能相互打断。<br>3、自然优先级：抢占和响应优先级都相同的情况下，自然优先级越高的越先执行。自然优先级指的是在中断向量表里的优先级。自然优先级可以在stm32f10x.h文件里有枚举类型IRQn_Type中查询到。</p><h2 id="2-5-中断优先级分组"><a href="#2-5-中断优先级分组" class="headerlink" title="2.5-中断优先级分组"></a>2.5-中断优先级分组</h2><table><thead><tr><th align="center">优先级分组</th><th align="center">AIRCR[10:8]</th><th align="center">IPRx bit[7:4]分配</th><th align="center">分配结果</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">111</td><td align="center">None:[7:4]</td><td align="center">0位抢占优先级（可配置0级），4位响应优先级（可配置16级）</td></tr><tr><td align="center">1</td><td align="center">110</td><td align="center">[7]:[6:4]</td><td align="center">1位抢占优先级（可配置2级），3位响应优先级（可配置8级）</td></tr><tr><td align="center">2</td><td align="center">101</td><td align="center">[7:6]:[5:4]</td><td align="center">2位抢断优先级（可配置4级），2位响应优先级（可配置4级）</td></tr><tr><td align="center">3</td><td align="center">100</td><td align="center">[7:5]:[4]</td><td align="center">3位抢断优先级（可配置8级），1位响应优先级（可配置1级）</td></tr><tr><td align="center">4</td><td align="center">011</td><td align="center">[7:4]:None</td><td align="center">4位抢断优先级（可配置16级），0位响应优先级（可配置0级）</td></tr></tbody></table><p><font color="#dd0000">特别提示：一个工程中，一般只设置一次中断优先级分组</font><br />   </p><h2 id="2-6-NVIC的使用"><a href="#2-6-NVIC的使用" class="headerlink" title="2.6-NVIC的使用"></a>2.6-NVIC的使用</h2><p>在创建NVIC配置函数时，使用static关键字，意味着这个函数只能被和此函数同在一个头文件中的函数调用。NVIC与EXTI一样自动开启时钟，不需要手动开启时钟。</p><pre><code>static void EXTI_NVIC_Config(void)&#123;&#125;</code></pre><p><strong>1、创建一个NVIC_InitTypeDef结构体：</strong></p><pre><code> NVIC_InitTypeDef NVIC_InitStructure;</code></pre><p><strong>2、设置分组：</strong>使用misc.h文件中的初始化函数 NVIC_PriorityGroupConfig()进行分组。  </p><pre><code>void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);</code></pre><p><strong>3、配置NVIC结构体参数：</strong>在misc.h文件前部有关于NVIC结构体的定义。</p><pre><code>  typedef struct&#123;  uint8_t NVIC_IRQChannel;                    /*!&lt; Specifies the IRQ channel to be enabled or disabled.                                                   This parameter can be a value of @ref IRQn_Type                                                    (For the complete STM32 Devices IRQ Channels list, please                                                    refer to stm32f10x.h file) */选择中断源  uint8_t NVIC_IRQChannelPreemptionPriority;  /*!&lt; Specifies the pre-emption priority for the IRQ channel                                                   specified in NVIC_IRQChannel. This parameter can be a value                                                   between 0 and 15 as described in the table @ref NVIC_Priority_Table */配置该中断源的抢断优先级  uint8_t NVIC_IRQChannelSubPriority;         /*!&lt; Specifies the subpriority level for the IRQ channel specified                                                   in NVIC_IRQChannel. This parameter can be a value                                                   between 0 and 15 as described in the table @ref NVIC_Priority_Table */配置该中断源的响应优先级  FunctionalState NVIC_IRQChannelCmd;         /*!&lt; Specifies whether the IRQ channel defined in NVIC_IRQChannel                                                   will be enabled or disabled.                                                    This parameter can be set either to ENABLE or DISABLE */ 配置使能位，也就是中断总开关的打开/关闭  &#125; NVIC_InitTypeDef;</code></pre><p>我们创建一个关于NVIC的结构体后就可以往里面写入配置参数。这里要注意的是中断源的选择在stm32f10x.h文件中有枚举类型IRQn_Type，从中选择就行，还要注意的是：</p><pre><code>  EXTI0_IRQn                  = 6,      /*!&lt; EXTI Line0 Interrupt                                 */  EXTI1_IRQn                  = 7,      /*!&lt; EXTI Line1 Interrupt                                 */  EXTI2_IRQn                  = 8,      /*!&lt; EXTI Line2 Interrupt                                 */  EXTI3_IRQn                  = 9,      /*!&lt; EXTI Line3 Interrupt                                 */  EXTI4_IRQn                  = 10,     /*!&lt; EXTI Line4 Interrupt                                 */  EXTI9_5_IRQn                = 23,     /*!&lt; External Line[9:5] Interrupts                        */  EXTI15_10_IRQn              = 40,     /*!&lt; External Line[15:10] Interrupts                      */</code></pre><p><font color="#dd0000">这里GPIO的5-9引脚共用一个中断源、10-15引脚共用一个中断源</font><br /><br><font color="#dd0000">4、初始化NVIC结构体：</font><br />其本质就是利用函数NVIC_Init()将配置好的NVIC结构体参数写入响应的寄存器中去。该函数定义在misc.h文件中。</p><pre><code>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);  </code></pre><h1 id="3-0-EXTI"><a href="#3-0-EXTI" class="headerlink" title="3.0-EXTI"></a>3.0-EXTI</h1><h2 id="3-1-基本概念"><a href="#3-1-基本概念" class="headerlink" title="3.1-基本概念"></a>3.1-基本概念</h2><p>External(Extended)interrupt&#x2F;even Controller,外部(扩展)中断事件控制器。其包含20个产生时间&#x2F;中断请求的边缘检测器，即总共20条EXTI线(F1)，其中EXTI线0<del>15对应GPIO PIN0</del>15、EXTI线16对应PVD输出、EXTI线17对应PTC闹钟事件、EXTI线18对应USB OTG FS唤醒事件、EXTI线19对应以太网唤醒事件（仅互联型有，基础型无）</p><table><thead><tr><th align="center">线数</th><th align="center">对应功能</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">EXTI线0~15</td><td align="center">GPIO PIN0~15</td><td align="center">无</td></tr><tr><td align="center">EXTI线16</td><td align="center">PVD输出</td><td align="center">无</td></tr><tr><td align="center">EXTI线17</td><td align="center">PTC闹钟事件</td><td align="center">无</td></tr><tr><td align="center">EXTI线18</td><td align="center">USB OTG FS唤醒事件</td><td align="center">无</td></tr><tr><td align="center">EXTI线19</td><td align="center">以太网唤醒事件</td><td align="center">仅互联型有，基础型无</td></tr></tbody></table><p>中断：要进入NVIC,有相应的中断服务函数，需要CPU处理。<br>事件:不进入nvic,仅用内部硬件自动控制的，如：TIM、DMA、ADC。  </p><h2 id="3-2-EXTI主要特性"><a href="#3-2-EXTI主要特性" class="headerlink" title="3.2-EXTI主要特性"></a>3.2-EXTI主要特性</h2><p>F1&#x2F;F4&#x2F;F7系列：<br>每条EXTI线都可以单独配置：选择类型（中断或者事件类型）、触发方式（上升沿、下降沿或者双边沿触发）、支持软件触发、开启&#x2F;屏蔽、有挂起状态位。</p><h2 id="3-3-EXTI工作原理"><a href="#3-3-EXTI工作原理" class="headerlink" title="3.3-EXTI工作原理"></a>3.3-EXTI工作原理</h2><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/d7e9307d97c58e0d8fcc5037b62cfe6.png"><br>需要重点掌握的寄存器：<br><font color="#dd0000">上升沿触发选择寄存器(EXTI_RTSR)：</font><br />选择或禁止EXTI某条线上的上升沿触发方式<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/8560d9c63af3375b5b16e9521df47d4.png"><br><font color="#dd0000">上升沿触发选择寄存器(EXTI_RTSR)：</font><br />选择或禁止EXTI某条线上的上升沿触发方式<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/f4c10913e600036e6d3c69245cc11d0.png"><br><font color="#dd0000">中断屏蔽寄存器(EXTI_IMR)：</font><br />选择屏蔽EXTI某条线上的中断请求<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/07b4f4509c571d901d3ba1592d796d7.png"><br><font color="#dd0000">挂起寄存器(EXTI_PR)：</font><br />EXTI某条线发生中断，则EXTI_PR的对应位会由硬件置1。在中断处理函数中要清楚该位，写入1即可清除。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/e94cf2ded3c141db556dd66ad003f3c.png"></p><h2 id="3-4-EXTI和IO的映射关系"><a href="#3-4-EXTI和IO的映射关系" class="headerlink" title="3.4-EXTI和IO的映射关系"></a>3.4-EXTI和IO的映射关系</h2><h3 id="3-4-1-AFIO简介"><a href="#3-4-1-AFIO简介" class="headerlink" title="3.4.1-AFIO简介"></a>3.4.1-AFIO简介</h3><p>Alternate FUnction IO,即复用功能IO，主要用于重映射和外部中断源映射配置。<br>1、调试IO配置：AFIO_MARR[26:24],配置JTAG&#x2F;SWD的开关状态。<br>2、重映射配置：AFIO_MARR，部分外设IO口重映射配置。<br>3、外部中断配置：AFIO_EXTICR1~4，配置EXTI中断线对应到哪个具体IO口。<br><font color="#dd0000">特别注意：</font><br />配置AFIO寄存器之前要使能AFIO时钟，用stm32f1ox_rcc.h文件中的函数</p><pre><code>void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</code></pre><h3 id="3-4-2-EXTI与IO对应关系"><a href="#3-4-2-EXTI与IO对应关系" class="headerlink" title="3.4.2-EXTI与IO对应关系"></a>3.4.2-EXTI与IO对应关系</h3><p>查阅STM32中文参考手册，AFIO有4个外部中断配置寄存器(AFIO_EXTICR1、AFIO_EXTICR2、AFIO_EXTICR3、AFIO_EXTICR4)，它们的低16位有效，每4位配置EXTI的某条线(0<del>15),这四位的数值又可以配GPIO置具体端口(A</del>G)。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a2aae20fe5b35eea1e6d7c3639b0827.png"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/880e6df44ae14c276001379489501fd.png"></p><h2 id="3-5-EXTI的使用"><a href="#3-5-EXTI的使用" class="headerlink" title="3.5-EXTI的使用"></a>3.5-EXTI的使用</h2><p><strong>1、创建一个EXTI结构体：</strong>在stm32f10x_exti.h文件中有关于EXTI结构体的定义，结构体的创建要在函数的最前面创建。</p><pre><code>typedef struct&#123;  uint32_t EXTI_Line;               /*!&lt; Specifies the EXTI lines to be enabled or disabled.                                         This parameter can be any combination of @ref EXTI_Lines */     EXTIMode_TypeDef EXTI_Mode;       /*!&lt; Specifies the mode for the EXTI lines.                                         This parameter can be a value of @ref EXTIMode_TypeDef */  EXTITrigger_TypeDef EXTI_Trigger; /*!&lt; Specifies the trigger signal active edge for the EXTI lines.                                         This parameter can be a value of @ref EXTIMode_TypeDef */  FunctionalState EXTI_LineCmd;     /*!&lt; Specifies the new state of the selected EXTI lines.                                         This parameter can be set either to ENABLE or DISABLE */ &#125;EXTI_InitTypeDef;</code></pre><p><strong>2、开启时钟：</strong>查阅stm32中文手册中存储器与总线设置可知，AFIO与GPIOA都挂载在AHP2上。stm32f10x_rcc.h上有AHB2时钟开启函数,注意EXTI和NVIC的时钟是自动开启无需手动开启，这里开启的是AFIO的时钟。<br>    void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);<br><strong>3、选择输入信号源：</strong>这个函数中配置了AFIO中的EXTICR寄存器，用于EXTIx线的外部中断输入源。</p><pre><code>GPIO_EXTILineConfig(KEY1_INT_EXTI_PORTSOURCE, KEY1_INT_EXTI_PINSOURCE); </code></pre><p><strong>3、配置步骤一创建的EXTI结构体中的参数：</strong>相应的参数在stm32f10x_exti.h文件中都有枚举。这里的选择信号源指的是对中断信号源开启或者屏蔽，用于初始化EXTI-&gt;EMR或EXTI-&gt;IMR这两个寄存器。</p><pre><code>EXTI_InitStructure.EXTI_Line = EXTI_Line0;                /*选择信号源*/EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;       /*EXTI设置为中断模式*/EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;    /*上升沿触发中断*/EXTI_InitStructure.EXTI_LineCmd = ENABLE;                 /*中断使能*/</code></pre><p><strong>4、初始化结构体：</strong>本质是将第三步配置好的参数写入相应的寄存器中，只不过将这一步用库函数封装了。</p><pre><code>EXTI_Init(&amp;EXTI_InitStructure);</code></pre><h1 id="4-0-GPIO"><a href="#4-0-GPIO" class="headerlink" title="4.0-GPIO"></a>4.0-GPIO</h1><h2 id="4-1-GPIO的配置"><a href="#4-1-GPIO的配置" class="headerlink" title="4.1-GPIO的配置"></a>4.1-GPIO的配置</h2><p><strong>1、创建一GPIO结构体：</strong>在stm32f10x_gpio.h文件中有关于gpio结构体的定义。注意结构体成员中只有要配置的GPIO引脚(0到15)而没有要配置的GPIO端口。端口的参数(A到G)在GPIO初始化函数中调用。</p><pre><code>typedef struct&#123;  uint16_t GPIO_Pin;             /*!&lt; Specifies the GPIO pins to be configured.                                      This parameter can be any value of @ref GPIO_pins_define */选择  GPIOSpeed_TypeDef GPIO_Speed;  /*!&lt; Specifies the speed for the selected pins.                                      This parameter can be a value of @ref GPIOSpeed_TypeDef */  GPIOMode_TypeDef GPIO_Mode;    /*!&lt; Specifies the operating mode for the selected pins.                                      This parameter can be a value of @ref GPIOMode_TypeDef */&#125;GPIO_InitTypeDef; </code></pre><p><strong>2、开启时钟：</strong> 每个外设都配备了外设时钟的开关，当我们不使用某个外设时，可以把这个外设时钟关闭，从而降低 STM32 的整体功耗。因此，在我们使用外设前，必须要开启相应外设的时钟。在stm32f10x_rcc.c文件中有时钟开启函数</p><pre><code>void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)  </code></pre><p><strong>3、配置结构体成员的参数</strong><br>引脚选用相应的引脚即可。<br>输入模式选用浮空输入：输入信号经过施密特触发器接入输入数据存储器。当无信号输入时，电压不确定。因为浮空输入既高阻输入，可以认为输入端口阻抗无穷大，这样可以检测到微弱的信号。（相当于电压表测电压，如果电压表内阻不够大而外部阻抗比较大，则电压表分压会比较小）。此时输入高电平即高电平，输入低电平即低电平。但是外界没有输入时输入电平却容易受到外界电磁以及各种玄学干扰的影响。如按键采用浮空输入，则在按键按下时输入电平为低，但是当松开按键时输入端口悬空，外界有微弱的干扰都会被端口检测到。此时端口可能高，也可能低。<br>因为是输入所以没有模式的配置，可以删除。<br>**4、初始化结构体:**利用函数初始化结构体，本质就是将配置的结构体成员参数写入相应的寄存器中去，这一步封装成了个函数。</p><pre><code>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</code></pre><h1 id="5-0-中断服务函数"><a href="#5-0-中断服务函数" class="headerlink" title="5.0-中断服务函数"></a>5.0-中断服务函数</h1><p>中断服务函数定义在stm32f10x_it.c文件中，包括以下几个部分：<br><strong>1、中断服务函数名：</strong>中断服务函数名在启动文件startup_stm32f10x_hd.s中的中断向量表里，名称不能随意更改。中断发生后自动跳转到对应的中断服务函数中去。<br><strong>2、判断中断是否真发生：</strong>在stm32f10x_exti.h文件中调用函数如下，判断是否真实发生中断。  </p><pre><code>ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);</code></pre><p>其中的ITStarus是一个枚举类型的关键字</p><pre><code>typedef enum &#123;RESET = 0, SET = !RESET&#125; FlagStatus, ITStatus;  </code></pre><p><strong>3、清楚中断标志位：</strong>防止一直处于中断状态，调用stm32f10x_exti.c文件中的函数清除状态标志位。</p><pre><code>void EXTI_ClearITPendingBit(uint32_t EXTI_Line)&#123;  /* Check the parameters */  assert_param(IS_EXTI_LINE(EXTI_Line));    EXTI-&gt;PR = EXTI_Line;&#125;  </code></pre><h1 id="6-0-总结"><a href="#6-0-总结" class="headerlink" title="6.0-总结"></a>6.0-总结</h1><p>整个外部中断的配置思路是：GPIO的配置-&gt;EXTI的配置-&gt;NVIC的配置-&gt;CPU执行中断函数的配置</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2023/03/03/%E4%B8%AD%E6%96%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>STM32时钟系统</title>
      <link>http://example.com/2023/02/28/STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F/</link>
      <guid>http://example.com/2023/02/28/STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F/</guid>
      <pubDate>Tue, 28 Feb 2023 14:03:45 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;1-0-STM32时钟系统框架&quot;&gt;&lt;a href=&quot;#1-0-STM32时钟系统框架&quot; class=&quot;headerlink&quot; title=&quot;1.0-STM32时钟系统框架&quot;&gt;&lt;/a&gt;1.0-STM32时钟系统框架&lt;/h1&gt;&lt;p&gt;STM32F10**的时钟系统框架图</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="1-0-STM32时钟系统框架"><a href="#1-0-STM32时钟系统框架" class="headerlink" title="1.0-STM32时钟系统框架"></a>1.0-STM32时钟系统框架</h1><p>STM32F10**的时钟系统框架图如下<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/81e55b22349974904817ec531ea5b0e.png"><br>其中的蓝色方框为时钟源，他们的功能如下<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/fd7fad480d1d3269f6c0ee5bfa8abc3.png"><br>灰色的等腰梯形是时钟源选择器，它可以选择多路时钟信号的其中一个来作为信号输出给下一器件，绿色方框是预分频器，用来分频。</p><h1 id="2-0-系统初始化函数运行过程"><a href="#2-0-系统初始化函数运行过程" class="headerlink" title="2.0-系统初始化函数运行过程"></a>2.0-系统初始化函数运行过程</h1><p>总的来说，整个文件、函数的调用顺序如下：<br>startup_stm32f10x_cl.s（启动文件） → SystemInit() →  SetSysClock () → SetSysClockTo72()</p><h2 id="2-1-startup-stm32f10x-cl-s（启动文件）"><a href="#2-1-startup-stm32f10x-cl-s（启动文件）" class="headerlink" title="2.1-startup_stm32f10x_cl.s（启动文件）"></a>2.1-startup_stm32f10x_cl.s（启动文件）</h2><p>在启动文件startup_stm32f10x_hd.s中调用系统初始化函数SystemInit </p><pre><code>Reset_Handler   PROCEXPORT  Reset_Handler             [WEAK]IMPORT  __mainIMPORT  SystemInitLDR     R0, =SystemInitBLX     R0               LDR     R0, =__mainBX      R0ENDP</code></pre><p>注意系统初始化函数在，主函数main之前就已经调用了，也就是说程序执行主函数内容之前，系统就已经将时钟配置好了。 </p><h2 id="2-2-SystemInit"><a href="#2-2-SystemInit" class="headerlink" title="2.2-SystemInit()"></a>2.2-SystemInit()</h2><p>SystemInit()函数在文件system_stm32f10x.c文件中，这个文件主要是用来配置系统时钟。现对其代码进行逐项分析。  </p><pre><code>/* Reset the RCC clock configuration to the default reset state(for debug purpose) */  /* Set HSION bit */  RCC-&gt;CR |= (uint32_t)0x00000001;  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */#ifndef STM32F10X_CL  RCC-&gt;CFGR &amp;= (uint32_t)0xF8FF0000;#else  RCC-&gt;CFGR &amp;= (uint32_t)0xF0FF0000;#endif /* STM32F10X_CL */    /* Reset HSEON, CSSON and PLLON bits */  RCC-&gt;CR &amp;= (uint32_t)0xFEF6FFFF;  /* Reset HSEBYP bit */  RCC-&gt;CR &amp;= (uint32_t)0xFFFBFFFF;  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */  RCC-&gt;CFGR &amp;= (uint32_t)0xFF80FFFF;  </code></pre><p>该段代码主要是完成寄存器初始化功能。例如代码”RCC-&gt;CR &amp;&#x3D; (uint32_t)0xFFFBFFFF;”就相当于CC-&gt;CR &amp;&#x3D;1111 1111 1111 1011 1111 1111 1111 1111 也就是使得RCC的CR寄存器的第18位置为0。查数据手册可知<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1c42690b0d73fc4d7a1a28716fade94.png"></p><pre><code>#ifdef STM32F10X_CL  /* Reset PLL2ON and PLL3ON bits */  RCC-&gt;CR &amp;= (uint32_t)0xEBFFFFFF;  /* Disable all interrupts and clear pending bits  */  RCC-&gt;CIR = 0x00FF0000;  /* Reset CFGR2 register */  RCC-&gt;CFGR2 = 0x00000000;#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)  /* Disable all interrupts and clear pending bits  */  RCC-&gt;CIR = 0x009F0000;  /* Reset CFGR2 register */  RCC-&gt;CFGR2 = 0x00000000;      #else  /* Disable all interrupts and clear pending bits  */  RCC-&gt;CIR = 0x009F0000;#endif /* STM32F10X_CL */    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)  #ifdef DATA_IN_ExtSRAM    SystemInit_ExtMemCtl();   #endif /* DATA_IN_ExtSRAM */#endif </code></pre><p>该段代码中只执行”RCC-&gt;CIR &#x3D; 0x009F0000;”也就是RCC-&gt;CIR &#x3D;0000 0000 1001 1111 0000 0000 0000 0000，即让RCC的CIR寄存器的16、17、18、19、20、19、20、23位置1，其他位置0。查表可知其目的就是清除中断标志位<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/3b369f919260a74818dd110477fe6c5.png"><br>进入SetSysClock()函数</p><pre><code>  SetSysClock();#ifdef VECT_TAB_SRAM  SCB-&gt;VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */#else  SCB-&gt;VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */#endif &#125;</code></pre><h2 id="2-3-SetSysClock"><a href="#2-3-SetSysClock" class="headerlink" title="2.3-SetSysClock()"></a>2.3-SetSysClock()</h2><p>这是一个系统时钟判断函数，定义了哪个宏就进入到这个宏所对应的时钟系统配置函数。</p><pre><code>  static void SetSysClock(void)&#123;#ifdef SYSCLK_FREQ_HSE  SetSysClockToHSE();#elif defined SYSCLK_FREQ_24MHz  SetSysClockTo24();#elif defined SYSCLK_FREQ_36MHz  SetSysClockTo36();#elif defined SYSCLK_FREQ_48MHz  SetSysClockTo48();#elif defined SYSCLK_FREQ_56MHz  SetSysClockTo56();  #elif defined SYSCLK_FREQ_72MHz  SetSysClockTo72();#endif</code></pre><p> 在文件system_stm32f10x.c的开头，有这些宏的定义</p><pre><code>#if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)/* #define SYSCLK_FREQ_HSE    HSE_VALUE */ #define SYSCLK_FREQ_24MHz  24000000#else/* #define SYSCLK_FREQ_HSE    HSE_VALUE *//* #define SYSCLK_FREQ_24MHz  24000000 */ /* #define SYSCLK_FREQ_36MHz  36000000 *//* #define SYSCLK_FREQ_48MHz  48000000 *//* #define SYSCLK_FREQ_56MHz  56000000 */#define SYSCLK_FREQ_72MHz  72000000#endif</code></pre><p>STM32F10X的型号有如下：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/9849c35821adf143a0b69202150ddc4.png"><br>其中D表示密度(Density)，V表示容量(Volume)。<br>我们使用的是STM32F10X_HD型号，所以执行的是else中的语句定义了宏SYSCLK_FREQ_72MHz，相应的执行时钟配置函数为 SetSysClockTo72()。若要选择其他系统时钟只需将前面的“&#x2F;*”去除即可调用相应的宏所对应的系统时钟配置函数。</p><h2 id="2-4-SetSysClockTo72-函数"><a href="#2-4-SetSysClockTo72-函数" class="headerlink" title="2.4-SetSysClockTo72()函数"></a>2.4-SetSysClockTo72()函数</h2><p>SetSysClockTo72()函数代码总体分为总线时钟配置、系统时钟源的选择两个部分。其代码思路如下：<br>使能 HSE，并等待 HSE 稳定-&gt;等待 HSE 启动稳定，并做超时处理(HSE 启动成功，则继续往下处理,否则可以自己编写相应的报警代码)-&gt;使能 FLASH 预存取缓冲区-&gt;设置 AHB、 APB2、 APB1 预分频因子-&gt;设置 PLL 时钟来源，设置 PLL 倍频因子， PLLCLK &#x3D; HSE * 9 &#x3D; 72 MHz-&gt;使能 PLL-&gt;等待 PLL 稳定-&gt;选择 PLL 作为系统时钟来源-&gt;读取时钟切换状态位，确保 PLLCLK 被选为系统时钟</p><h3 id="2-4-1-总线时钟的分频"><a href="#2-4-1-总线时钟的分频" class="headerlink" title="2.4.1-总线时钟的分频"></a>2.4.1-总线时钟的分频</h3><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/e69e2dd96541cf78dc354f6dc293566.png"><br>各个RCC寄存器的主要作用<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a66df341e8d20a2affbdc1a03205226.png"><br>代码分析</p><pre><code>/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration（开启外部高速时钟） ---------------------------*/      /* Enable HSE */      RCC-&gt;CR |= ((uint32_t)RCC_CR_HSEON);</code></pre><p>在stm32f10x.h中RCC_CR_HSEON被宏定义成0x00010000，则这句代码的意思是将RCC中的寄存器CR的第16位置为1，其他位置为0。查数据手册知其目的是开启外部高速时钟。<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/85b0ff61a42abc0e9c1481e3992ff65.png"></p><pre><code>/* Wait till HSE is ready and if Time out is reached exit */  do  &#123;    HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;    StartUpCounter++;    &#125; while((HSEStatus == 0) &amp;&amp; (StartUpCounter != HSE_STARTUP_TIMEOUT));</code></pre><p>开启HSE后，该段代码等待HSE返回准备就绪标志位。在stm32f10x.h中RCC_CR_HSERDY被宏定义成(uint32_t)0x00020000，所以读取RCC中CR寄存器的第17位，并将其返回给HSEstatus.查数据手册知第17位是外部高速时钟就绪标志 (External high-speed clock ready flag) <img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/7a346b396fa75d17e4b988cc8d9710d.png">do-while循环结束的标志是外部时钟准备就绪标志位为1且等待时间不超时。我们在使能时钟源后都要等待其返回就绪。</p><pre><code>if (HSEStatus == (uint32_t)0x01)  &#123;    /* Enable Prefetch Buffer */    FLASH-&gt;ACR |= FLASH_ACR_PRFTBE;    /* Flash 2 wait state */    FLASH-&gt;ACR &amp;= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);    FLASH-&gt;ACR |= (uint32_t)FLASH_ACR_LATENCY_2;     </code></pre><p>如果就绪位返回为1，则执行接下来代码。FLASH_ACR_PRFTBE在stm32f10x.h文件中定义成(uint8_t)0x10，故在FLASH的ACR寄存器中的第4位写入1，其他位保持不变，查阅STM32F10***闪存编程手册可知其最终的结果是启用预取缓冲区。因为CPU的速度远大于存储器的速度，所以此处要2个等待状态<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/c2100189eb5b476586692809695ef4c.png">  </p><pre><code> /* HCLK = SYSCLK */    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;          /* PCLK2 = HCLK */    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;        /* PCLK1 = HCLK/2 */    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;</code></pre><p>第一句代码使HCLK(High-speed Clock,提供给高速总线AHB的时钟信号)等于系统时钟，由时钟系统框图可知AHB预分频器置为1（不分频），由STM32中文手册时钟配置寄存器(RCC_CFGR)可知其不分频时全部置0。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/4ea398a3d3a0af055ad9b9a923615ea.png"><br>第二句代码使PCLK2(Peripheral Clock,提供给低速总线APB2的时钟信号)等于HCLK，由时钟系统框图可知APB2-prescaler(APB2预分频器)置为1（不分频），由STM32中文手册时钟配置寄存器(RCC_CFGR)可知其不分频时全部置0。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/bc7d79867ec68385daef28c8a1df9e9.png"><br>第三句代码使PCLK1(Peripheral Clock,提供给低速总线APB1的时钟信号)等于HCLK的一半，由时钟系统框图可知AHB预分频器置为2（二分频），由STM32中文手册时钟配置寄存器(RCC_CFGR)可知其8-10位应为100，所以RCC-&gt;CFGR |&#x3D;0x00000400,也就是0000 0000 0000 0000 0000 0100 0000 0000，而事实上：</p><pre><code>#define  RCC_CFGR_PPRE1_DIV2       ((uint32_t)0x00000400)        /*!&lt; HCLK divided by 2 */</code></pre><h3 id="2-4-2-系统时钟源的选择"><a href="#2-4-2-系统时钟源的选择" class="headerlink" title="2.4.2-系统时钟源的选择"></a>2.4.2-系统时钟源的选择</h3><pre><code>#else/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */    RCC-&gt;CFGR &amp;= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |                                        RCC_CFGR_PLLMULL));    RCC-&gt;CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);</code></pre><p>该段代码将外部高速时钟源不分频再经锁相环9倍频成为72M系统时钟源。</p><pre><code>/* Enable PLL */    RCC-&gt;CR |= RCC_CR_PLLON;    /* Wait till PLL is ready */    while((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == 0)    &#123;    &#125;</code></pre><p>开启锁相环PLL,锁相环在SystemInit()函数中配置时钟控制寄存器(RCC_CR) 时已经关闭，因为在配置时钟配置寄存器(RCC_CFGR) 时很多位的写入需要将锁相环关闭。开启锁相环还需等待其返回PLL时钟就绪标志 (PLL clock ready flag)。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/50d36d7865f08a2a00871f4349946c9.png"><br>选择PLL作为系统时钟源，并判断其系统时钟切换状态</p><pre><code> /* Select PLL as system clock source */    RCC-&gt;CFGR &amp;= (uint32_t)((uint32_t)~(RCC_CFGR_SW));    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_SW_PLL;        /* Wait till PLL is used as system clock source */    while ((RCC-&gt;CFGR &amp; (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)    &#123;    &#125;</code></pre><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/8f9688bffd8918a32ab1e774e703e86.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2023/02/28/STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于GPIO三个寄存器：ODR、BSRR、BRR功能的理解</title>
      <link>http://example.com/2023/02/26/%E5%85%B3%E4%BA%8EGPIO%E4%B8%89%E4%B8%AA%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%9AODR%E3%80%81BSRR%E3%80%81BRR%E5%8A%9F%E8%83%BD%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <guid>http://example.com/2023/02/26/%E5%85%B3%E4%BA%8EGPIO%E4%B8%89%E4%B8%AA%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%9AODR%E3%80%81BSRR%E3%80%81BRR%E5%8A%9F%E8%83%BD%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <pubDate>Sun, 26 Feb 2023 06:46:07 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;首先ODR、BSRR、BRR三个寄存器都能控制引脚输出高低电平，它们在使用规则以及简易程度上有所不同。&lt;/p&gt;
&lt;h1 id=&quot;ODR&quot;&gt;&lt;a href=&quot;#ODR&quot; class=&quot;headerlink&quot; title=&quot;ODR&quot;&gt;&lt;/a&gt;ODR&lt;/h1&gt;&lt;p&gt;ODR：输出端</description>
        
      
      
      
      <content:encoded><![CDATA[<p>首先ODR、BSRR、BRR三个寄存器都能控制引脚输出高低电平，它们在使用规则以及简易程度上有所不同。</p><h1 id="ODR"><a href="#ODR" class="headerlink" title="ODR"></a>ODR</h1><p>ODR：输出端口寄存器 Output data register。ODR寄存器, 控制管脚的高、低电平，低16位有效，写1高电平，写0低电平。具体如图所示：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1f35b69b1c4b6984db6ebf4eed65336.png"><br>我们可以采用如下代码实现GPIO的0引脚交替输出高低电平：</p><pre><code>GPIOB-&gt;ODR |=(1&lt;&lt;0);Delay(0xFFFFF);GPIOB-&gt;ODR = 0;Delay(0xFFFFF);</code></pre><h1 id="BSRR"><a href="#BSRR" class="headerlink" title="BSRR"></a>BSRR</h1><p>BSRR寄存器, 控制管脚的高、低电平，32位有效，低16位写1 高电平，高16位写1 低电平。具体如图所示：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b96dde7fd93a54382d278cd0046b9a0.png"><br>在stm32f10x_gpio.c文件中给出了它的使用方法：</p><pre><code>void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)&#123;  /* Check the parameters */   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));  assert_param(IS_GPIO_PIN(GPIO_Pin));  GPIOx-&gt;BSRR = GPIO_Pin;&#125;</code></pre><p>GPIO_SetBits函数是用来使对应引脚输出高电平，这里的assert是断言，用来判断输入的参数是否合法。为什么将对应引脚”GPIO_Pin”(16位)赋值给BSRR就能使其输入高电平呢？<br>这个问题困扰了我蛮久，直到我查找了stm32f10x_gpio.h文件中对0~15个引脚的的定义就明白了，如图：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b682ea84bf422867c05320929500387.png"><br>比如这里对低13号引脚的定义，不是将13简单的转化为二进制1101，而是将16个位置上的第14位置1，其他位置0，即：<br>0010 0000 0000 0000<br>转化成十六进制就是0x2000，这样将该引脚的16位赋值给BSRR的低十六位时，就能保证在13引脚被赋值1，其他引脚赋值0，再根据BSRR的使用特点知13引脚输出高电平，其他引脚不变。<br>我们利用BSRR的高16位，采用如下代码就可以实现对应GPIO引脚输出低电平。</p><pre><code>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)&#123;  /* Check the parameters */  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));  assert_param(IS_GPIO_PIN(GPIO_Pin));    GPIOx-&gt;BSRR = (PIO_Pin&lt;&lt;16);&#125;</code></pre><p>如此看来，仅使用一个寄存器BSRR就可以使GPIO引脚输出高低电平，实时也是如此，F1和F4系列都有ODR和BSRR，但F4 取消了BRR。所以为了代码通用，尽量不使用BRR，反正BSRR能完成。  </p><h1 id="BRR"><a href="#BRR" class="headerlink" title="BRR"></a>BRR</h1><p>BRR寄存器, 控制管脚的低电平，低16位有效，写1 低电平。具体如图所示<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/c2434bad7a8843ceabad643ba2d76e2.png"><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a5233e2228d2c96e785cb8ad078ddd5.png"><br>在stm32f10x_gpio.c文件中给出了它的使用方法：</p><pre><code>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)&#123;  /* Check the parameters */  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));  assert_param(IS_GPIO_PIN(GPIO_Pin));    GPIOx-&gt;BRR = GPIO_Pin;&#125;</code></pre><p>GPIO_ResetBits函数是用来使对应引脚输出低电平，分析方法与GPIO_SetBits函数使对应引脚输出低电平类似，不再赘述。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2023/02/26/%E5%85%B3%E4%BA%8EGPIO%E4%B8%89%E4%B8%AA%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%9AODR%E3%80%81BSRR%E3%80%81BRR%E5%8A%9F%E8%83%BD%E7%9A%84%E7%90%86%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单片机常见英文缩写</title>
      <link>http://example.com/2023/02/25/%E5%8D%95%E7%89%87%E6%9C%BA%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87%E7%BC%A9%E5%86%99/</link>
      <guid>http://example.com/2023/02/25/%E5%8D%95%E7%89%87%E6%9C%BA%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87%E7%BC%A9%E5%86%99/</guid>
      <pubDate>Sat, 25 Feb 2023 12:13:07 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;RCC:        振荡－阻塞变换器         Ringing Choke(阻塞) Converter&lt;br&gt;APB:        外围总线                Advanced Peripheral(外围的) Bus&lt;br&gt;GPIO:        </description>
        
      
      
      
      <content:encoded><![CDATA[<p>RCC:        振荡－阻塞变换器         Ringing Choke(阻塞) Converter<br>APB:        外围总线                Advanced Peripheral(外围的) Bus<br>GPIO:        通用输入&#x2F;输出                 General Purpose Input Output<br>HSE Osc:                        High Speed External Oscillator(振荡器)<br>AHB:        高级高性能总线                Advanced High performance Bus<br>PLL:          锁相环                        Phase Locked Loop<br>FWLib:        固件库                        Firmware Library<br>TVS：        瞬态电压抑制器        Transient Voltage Suppressor<br>CMRR:        共模抑制比<br>CRL          端口配置低寄存器     configuration registe low<br>CRH          端口配置高寄存器     configuration registe high<br>ODR：        输出端口寄存器       Output data register<br>NVIC:        嵌套向量中断控制器  Nested Vectored Interrupt Controller (NVIC)<br>TDI:        传输驱动程序接口         Transport Driver(驱动) Interface(接口)<br>ROM：       只读存储器                   Read Only Memory<br>RAM:         随机存储器               Random Access Memory<br>MCU：        微控制单元                Microcontroller Unit<br>IEEE：      电气和电子工程师协会        Institute of Electrical and Electronics     Engineers<br>ADC：       模数变换器                        Analog-to-Digital Converter<br>SPI：       串行外设接口                Serial Peripheral Interface<br>PWM：       脉冲宽度调制                 Pulse Width Modulation<br>USART：通用同步异步收发机        Universal Synchronous Asynchronous Receiver   Transmitter<br>IRQ：中断请求                        Interrupt Request<br>RTC：实时时钟                        Real-Time Clock<br>DMA ：直接存储器访问                Direct Memory Access<br>SDIO：安全数字输入输出卡        Secure Digital Input and Output Card<br>TXD:发送数据                        Transmit(tx) Data<br>RXD:接收数据                        Receive(rx) Data<br>out_pp      推挽输出                       push put<br>HSE         高速外部时钟信号            High Speed External Clock signal<br>RCC         时钟控制                    reset and clock control<br>NVIC        嵌套中断向量控制器                          Nested Vectored interrupt</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2023/02/25/%E5%8D%95%E7%89%87%E6%9C%BA%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87%E7%BC%A9%E5%86%99/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>电解水实验</title>
      <link>http://example.com/2023/02/23/%E7%94%B5%E8%A7%A3%E6%B0%B4%E5%AE%9E%E9%AA%8C/</link>
      <guid>http://example.com/2023/02/23/%E7%94%B5%E8%A7%A3%E6%B0%B4%E5%AE%9E%E9%AA%8C/</guid>
      <pubDate>Thu, 23 Feb 2023 04:21:57 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;点击视频：&lt;img src=&quot;https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1bd11a265a4d38237ab061f8bc8065bd.mp4&quot;&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>点击视频：<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1bd11a265a4d38237ab061f8bc8065bd.mp4"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%9D%82%E8%B0%88%E7%90%90%E7%A2%8E/">杂谈琐碎</category>
      
      
      
      <comments>http://example.com/2023/02/23/%E7%94%B5%E8%A7%A3%E6%B0%B4%E5%AE%9E%E9%AA%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>水果电池实验</title>
      <link>http://example.com/2023/02/23/%E6%B0%B4%E6%9E%9C%E7%94%B5%E6%B1%A0%E5%AE%9E%E9%AA%8C/</link>
      <guid>http://example.com/2023/02/23/%E6%B0%B4%E6%9E%9C%E7%94%B5%E6%B1%A0%E5%AE%9E%E9%AA%8C/</guid>
      <pubDate>Thu, 23 Feb 2023 03:19:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;材料：4个柠檬、铜片、锌片、LED灯、若干导线&lt;br&gt;&lt;img src=&quot;https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/61efb300458ec44f8b40847ea4cdfa3.jpg&quot;&gt;&lt;br&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>材料：4个柠檬、铜片、锌片、LED灯、若干导线<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/61efb300458ec44f8b40847ea4cdfa3.jpg"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/8a6937fb98abf0b1e53e6109d388fc9.jpg"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/3cddb52eae44093c5f55534ec6da685.jpg"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/28504674a2c9e1226fc4bd8caa70df4.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%9D%82%E8%B0%88%E7%90%90%E7%A2%8E/">杂谈琐碎</category>
      
      
      
      <comments>http://example.com/2023/02/23/%E6%B0%B4%E6%9E%9C%E7%94%B5%E6%B1%A0%E5%AE%9E%E9%AA%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>stm32相邻寄存器地址差4</title>
      <link>http://example.com/2023/02/22/stm32%E7%9B%B8%E9%82%BB%E5%AF%84%E5%AD%98%E5%99%A8%E5%9C%B0%E5%9D%80%E5%B7%AE4/</link>
      <guid>http://example.com/2023/02/22/stm32%E7%9B%B8%E9%82%BB%E5%AF%84%E5%AD%98%E5%99%A8%E5%9C%B0%E5%9D%80%E5%B7%AE4/</guid>
      <pubDate>Wed, 22 Feb 2023 10:39:06 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;stm32是32位CPU,CPU内部及外部一次最多可处理32位二进制数据，内存总线也是32位。&lt;br&gt;单片机的内存单元是一个字节，也就是8bite。CPU一次读取数据就要读取32位数据，也就是4字节，读取一个寄存器的信息，所以一个寄存器应占有4字节。&lt;br&gt;注意：寄存器地址</description>
        
      
      
      
      <content:encoded><![CDATA[<p>stm32是32位CPU,CPU内部及外部一次最多可处理32位二进制数据，内存总线也是32位。<br>单片机的内存单元是一个字节，也就是8bite。CPU一次读取数据就要读取32位数据，也就是4字节，读取一个寄存器的信息，所以一个寄存器应占有4字节。<br>注意：寄存器地址！&#x3D;内存地址，寄存器地址只是内存空间的编号，他不占用寄存器的物理空间，根据这个编号CPU可以改变寄存器内部的实参（利用指针）。stm32能表示4GB的内存空间，并不意味着它有$2^{32}$个地址，实际理论上只有$2^{16}$个地址。<br>我们所说的地址0x0000 0001这里的1并不是1位，而是一个字节，因为单片机存储的最小单元是一个字节8位，问们给内存编地址增量1指的是最小内存单元增加1。<br>而正因为寄存器的地址偏移4，如果定义一个寄存器的类型为(unsigned int)就正好在内存中占据4个字节，而一个内存单元就是一个字节，分配一个地址，那4个字节就正好每次偏移4个地址，而且又符合结构体的内对其，所以我们常将寄存器定义在一个结构体中，通过访问&#x2F;赋值结构体成员来访问&#x2F;赋值寄存器。如图所示：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/51af7831294100c41a786bba9ca7dd5.png"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2023/02/22/stm32%E7%9B%B8%E9%82%BB%E5%AF%84%E5%AD%98%E5%99%A8%E5%9C%B0%E5%9D%80%E5%B7%AE4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单片机寄存器的理解</title>
      <link>http://example.com/2022/11/30/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <guid>http://example.com/2022/11/30/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <pubDate>Wed, 30 Nov 2022 11:10:44 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;单片机芯片的结构&quot;&gt;&lt;a href=&quot;#单片机芯片的结构&quot; class=&quot;headerlink&quot; title=&quot;单片机芯片的结构&quot;&gt;&lt;/a&gt;单片机芯片的结构&lt;/h1&gt;&lt;p&gt;单片机上的芯片并不是我们传统意义上理解的芯片，而是集成了很多其他的外设。这些外设是必不可少的</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="单片机芯片的结构"><a href="#单片机芯片的结构" class="headerlink" title="单片机芯片的结构"></a>单片机芯片的结构</h1><p>单片机上的芯片并不是我们传统意义上理解的芯片，而是集成了很多其他的外设。这些外设是必不可少的，所以干脆把他们集成在一起封装好，片上系统（SoC：System-on-a-chip）也由此而来。<br>下图是STM32F103VET6的引脚图：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/731e4053ae3261ecb7b8c3e68fc1277.png"></p><p>事实上他内部是这样的：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/72b41bd8db722c134a9f5031dc6a274.png"></p><p>我们看到的 STM32 芯片是已经封装好的成品，主要由内核和片上外设组成。若与电脑类比，内核与外设就如同电脑上的 CPU 与主板、内存、显卡、硬盘的关系。STM32F103 采用的是 Cortex-M3 内核，内核即 CPU，由 ARM 公司设计。ARM 公司并不生产芯片，而是出售其芯片技术授权。芯片生产厂商 (SOC) 如 ST、TI、Freescale，负责在内核之外设计部件并生产整个芯片，这些内核之外的部件被称为核外外设或片上外设。如 GPIO、USART（串<br>口）、I2C、SPI 等都叫做片上外设。</p><h1 id="寄存器作用"><a href="#寄存器作用" class="headerlink" title="寄存器作用"></a>寄存器作用</h1><p>单片机的内核负责程序运算、对外设的读写等功能。但是内核并不知道外设在哪里，所以需要对外设进行地址编码。STM32是32位，也就是有32根地址线，能表示0~$2^{32}$地址范围(4G)。如图所示:<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a1ac04bdfb1e6038673bbf9015794d5.png"></p><p>CPU可以通过地址来访问这些地址所对应的外设(GPIO、UART、FLASH)，我们以STM32的GPIO为例来看看CPU是如何驱动外设的。GPIO(通用输入输出,General Purpose Input&#x2F;Output),它是一类输入输出端口，又能分为GPIOA~GPIOE等5组,每一组又对外提供16个引脚，所以属于GPIO的引脚一共有5*16&#x3D;80个引脚。如图所示是GPIOB的16个引脚：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/05d4cc403fd3c31c8fcc21448787e8a.png"></p><p>每一组GPIO有多个寄存器和硬件控制器(驱动器)，寄存器应该理解成一种存储器，并且像FLASH外设一样拥有一个自己唯一的地址，CPU可以通过这些地址找到这个寄存器，并向该寄存器写入信息(STM32的寄存器有32位，所以CPU可以向寄存器写入32位信息，每一位都有其代表的意义，具体要查数据手册)，也能供CPU读取信息。CPU通过向寄存器写入信息，寄存器控制硬件控制器(驱动器)通过引脚输出高低电平，从而实现了CPU对硬件的间接控制(不用CPU直接输出高低电平的原因是,CPU的驱动能力弱，带负载能力差，直接与设备相连会有烧坏或者无法工作)。寄存器因此得名，暂时寄存数据的存储器。</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA/">单片机</category>
      
      
      
      <comments>http://example.com/2022/11/30/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mytest</title>
      <link>http://example.com/2022/11/28/mytest/</link>
      <guid>http://example.com/2022/11/28/mytest/</guid>
      <pubDate>Mon, 28 Nov 2022 12:25:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这是我的一个测试&lt;br&gt;首先插入一张照片&lt;br&gt;&lt;img src=&quot;https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b763ca7c840887d5b4961696d96b81ab.jpg&quot;&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这是我的一个测试<br>首先插入一张照片<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b763ca7c840887d5b4961696d96b81ab.jpg"></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      
      <comments>http://example.com/2022/11/28/mytest/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
