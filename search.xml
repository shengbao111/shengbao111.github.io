<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32时钟系统</title>
      <link href="/2023/02/28/STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/02/28/STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-0-STM32时钟系统框架"><a href="#1-0-STM32时钟系统框架" class="headerlink" title="1.0-STM32时钟系统框架"></a>1.0-STM32时钟系统框架</h1><p>STM32F10**的时钟系统框架图如下<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/81e55b22349974904817ec531ea5b0e.png"><br>其中的蓝色方框为时钟源，他们的功能如下<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/fd7fad480d1d3269f6c0ee5bfa8abc3.png"><br>灰色的等腰梯形是时钟源选择器，它可以选择多路时钟信号的其中一个来作为信号输出给下一器件，绿色方框是预分频器，用来分频。</p><h1 id="2-0-系统初始化函数运行过程"><a href="#2-0-系统初始化函数运行过程" class="headerlink" title="2.0-系统初始化函数运行过程"></a>2.0-系统初始化函数运行过程</h1><p>总的来说，整个文件、函数的调用顺序如下：<br>startup_stm32f10x_cl.s（启动文件） → SystemInit() →  SetSysClock () → SetSysClockTo72()</p><h2 id="2-1-startup-stm32f10x-cl-s（启动文件）"><a href="#2-1-startup-stm32f10x-cl-s（启动文件）" class="headerlink" title="2.1-startup_stm32f10x_cl.s（启动文件）"></a>2.1-startup_stm32f10x_cl.s（启动文件）</h2><p>在启动文件startup_stm32f10x_hd.s中调用系统初始化函数SystemInit </p><pre><code>Reset_Handler   PROCEXPORT  Reset_Handler             [WEAK]IMPORT  __mainIMPORT  SystemInitLDR     R0, =SystemInitBLX     R0               LDR     R0, =__mainBX      R0ENDP</code></pre><p>注意系统初始化函数在，主函数main之前就已经调用了，也就是说程序执行主函数内容之前，系统就已经将时钟配置好了。 </p><h2 id="2-2-SystemInit"><a href="#2-2-SystemInit" class="headerlink" title="2.2-SystemInit()"></a>2.2-SystemInit()</h2><p>SystemInit()函数在文件system_stm32f10x.c文件中，这个文件主要是用来配置系统时钟。现对其代码进行逐项分析。  </p><pre><code>/* Reset the RCC clock configuration to the default reset state(for debug purpose) */  /* Set HSION bit */  RCC-&gt;CR |= (uint32_t)0x00000001;  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */#ifndef STM32F10X_CL  RCC-&gt;CFGR &amp;= (uint32_t)0xF8FF0000;#else  RCC-&gt;CFGR &amp;= (uint32_t)0xF0FF0000;#endif /* STM32F10X_CL */    /* Reset HSEON, CSSON and PLLON bits */  RCC-&gt;CR &amp;= (uint32_t)0xFEF6FFFF;  /* Reset HSEBYP bit */  RCC-&gt;CR &amp;= (uint32_t)0xFFFBFFFF;  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */  RCC-&gt;CFGR &amp;= (uint32_t)0xFF80FFFF;  </code></pre><p>该段代码主要是完成寄存器初始化功能。例如代码”RCC-&gt;CR &amp;&#x3D; (uint32_t)0xFFFBFFFF;”就相当于CC-&gt;CR &amp;&#x3D;1111 1111 1111 1011 1111 1111 1111 1111 也就是使得RCC的CR寄存器的第18位置为0。查数据手册可知<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1c42690b0d73fc4d7a1a28716fade94.png"></p><pre><code>#ifdef STM32F10X_CL  /* Reset PLL2ON and PLL3ON bits */  RCC-&gt;CR &amp;= (uint32_t)0xEBFFFFFF;  /* Disable all interrupts and clear pending bits  */  RCC-&gt;CIR = 0x00FF0000;  /* Reset CFGR2 register */  RCC-&gt;CFGR2 = 0x00000000;#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)  /* Disable all interrupts and clear pending bits  */  RCC-&gt;CIR = 0x009F0000;  /* Reset CFGR2 register */  RCC-&gt;CFGR2 = 0x00000000;      #else  /* Disable all interrupts and clear pending bits  */  RCC-&gt;CIR = 0x009F0000;#endif /* STM32F10X_CL */    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)  #ifdef DATA_IN_ExtSRAM    SystemInit_ExtMemCtl();   #endif /* DATA_IN_ExtSRAM */#endif </code></pre><p>该段代码中只执行”RCC-&gt;CIR &#x3D; 0x009F0000;”也就是RCC-&gt;CIR &#x3D;0000 0000 1001 1111 0000 0000 0000 0000，即让RCC的CIR寄存器的16、17、18、19、20、19、20、23位置1，其他位置0。查表可知其目的就是清除中断标志位<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/3b369f919260a74818dd110477fe6c5.png"><br>进入SetSysClock()函数</p><pre><code>  SetSysClock();#ifdef VECT_TAB_SRAM  SCB-&gt;VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */#else  SCB-&gt;VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */#endif &#125;</code></pre><h2 id="2-3-SetSysClock"><a href="#2-3-SetSysClock" class="headerlink" title="2.3-SetSysClock()"></a>2.3-SetSysClock()</h2><p>这是一个系统时钟判断函数，定义了哪个宏就进入到这个宏所对应的时钟系统配置函数。</p><pre><code>  static void SetSysClock(void)&#123;#ifdef SYSCLK_FREQ_HSE  SetSysClockToHSE();#elif defined SYSCLK_FREQ_24MHz  SetSysClockTo24();#elif defined SYSCLK_FREQ_36MHz  SetSysClockTo36();#elif defined SYSCLK_FREQ_48MHz  SetSysClockTo48();#elif defined SYSCLK_FREQ_56MHz  SetSysClockTo56();  #elif defined SYSCLK_FREQ_72MHz  SetSysClockTo72();#endif</code></pre><p> 在文件system_stm32f10x.c的开头，有这些宏的定义</p><pre><code>#if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)/* #define SYSCLK_FREQ_HSE    HSE_VALUE */ #define SYSCLK_FREQ_24MHz  24000000#else/* #define SYSCLK_FREQ_HSE    HSE_VALUE *//* #define SYSCLK_FREQ_24MHz  24000000 */ /* #define SYSCLK_FREQ_36MHz  36000000 *//* #define SYSCLK_FREQ_48MHz  48000000 *//* #define SYSCLK_FREQ_56MHz  56000000 */#define SYSCLK_FREQ_72MHz  72000000#endif</code></pre><p>STM32F10X的型号有如下：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/9849c35821adf143a0b69202150ddc4.png"><br>其中D表示密度(Density)，V表示容量(Volume)。<br>我们使用的是STM32F10X_HD型号，所以执行的是else中的语句定义了宏SYSCLK_FREQ_72MHz，相应的执行时钟配置函数为 SetSysClockTo72()。若要选择其他系统时钟只需将前面的“&#x2F;*”去除即可调用相应的宏所对应的系统时钟配置函数。</p><h2 id="2-4-SetSysClockTo72-函数"><a href="#2-4-SetSysClockTo72-函数" class="headerlink" title="2.4-SetSysClockTo72()函数"></a>2.4-SetSysClockTo72()函数</h2><p>SetSysClockTo72()函数代码总体分为总线时钟配置、系统时钟源的选择两个部分。其代码思路如下：<br>使能 HSE，并等待 HSE 稳定-&gt;等待 HSE 启动稳定，并做超时处理(HSE 启动成功，则继续往下处理,否则可以自己编写相应的报警代码)-&gt;使能 FLASH 预存取缓冲区-&gt;设置 AHB、 APB2、 APB1 预分频因子-&gt;设置 PLL 时钟来源，设置 PLL 倍频因子， PLLCLK &#x3D; HSE * 9 &#x3D; 72 MHz-&gt;使能 PLL-&gt;等待 PLL 稳定-&gt;选择 PLL 作为系统时钟来源-&gt;读取时钟切换状态位，确保 PLLCLK 被选为系统时钟</p><h3 id="2-4-1-总线时钟的分频"><a href="#2-4-1-总线时钟的分频" class="headerlink" title="2.4.1-总线时钟的分频"></a>2.4.1-总线时钟的分频</h3><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/e69e2dd96541cf78dc354f6dc293566.png"><br>各个RCC寄存器的主要作用<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a66df341e8d20a2affbdc1a03205226.png"><br>代码分析</p><pre><code>/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration（开启外部高速时钟） ---------------------------*/      /* Enable HSE */      RCC-&gt;CR |= ((uint32_t)RCC_CR_HSEON);</code></pre><p>在stm32f10x.h中RCC_CR_HSEON被宏定义成0x00010000，则这句代码的意思是将RCC中的寄存器CR的第16位置为1，其他位置为0。查数据手册知其目的是开启外部高速时钟。<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/85b0ff61a42abc0e9c1481e3992ff65.png"></p><pre><code>/* Wait till HSE is ready and if Time out is reached exit */  do  &#123;    HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;    StartUpCounter++;    &#125; while((HSEStatus == 0) &amp;&amp; (StartUpCounter != HSE_STARTUP_TIMEOUT));</code></pre><p>开启HSE后，该段代码等待HSE返回准备就绪标志位。在stm32f10x.h中RCC_CR_HSERDY被宏定义成(uint32_t)0x00020000，所以读取RCC中CR寄存器的第17位，并将其返回给HSEstatus.查数据手册知第17位是外部高速时钟就绪标志 (External high-speed clock ready flag) <img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/7a346b396fa75d17e4b988cc8d9710d.png">do-while循环结束的标志是外部时钟准备就绪标志位为1且等待时间不超时。我们在使能时钟源后都要等待其返回就绪。</p><pre><code>if (HSEStatus == (uint32_t)0x01)  &#123;    /* Enable Prefetch Buffer */    FLASH-&gt;ACR |= FLASH_ACR_PRFTBE;    /* Flash 2 wait state */    FLASH-&gt;ACR &amp;= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);    FLASH-&gt;ACR |= (uint32_t)FLASH_ACR_LATENCY_2;     </code></pre><p>如果就绪位返回为1，则执行接下来代码。FLASH_ACR_PRFTBE在stm32f10x.h文件中定义成(uint8_t)0x10，故在FLASH的ACR寄存器中的第4位写入1，其他位保持不变，查阅STM32F10***闪存编程手册可知其最终的结果是启用预取缓冲区。因为CPU的速度远大于存储器的速度，所以此处要2个等待状态<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/c2100189eb5b476586692809695ef4c.png">  </p><pre><code> /* HCLK = SYSCLK */    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;          /* PCLK2 = HCLK */    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;        /* PCLK1 = HCLK/2 */    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;</code></pre><p>第一句代码使HCLK(High-speed Clock,提供给高速总线AHB的时钟信号)等于系统时钟，由时钟系统框图可知AHB预分频器置为1（不分频），由STM32中文手册时钟配置寄存器(RCC_CFGR)可知其不分频时全部置0。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/4ea398a3d3a0af055ad9b9a923615ea.png"><br>第二句代码使PCLK2(Peripheral Clock,提供给低速总线APB2的时钟信号)等于HCLK，由时钟系统框图可知APB2-prescaler(APB2预分频器)置为1（不分频），由STM32中文手册时钟配置寄存器(RCC_CFGR)可知其不分频时全部置0。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/bc7d79867ec68385daef28c8a1df9e9.png"><br>第三句代码使PCLK1(Peripheral Clock,提供给低速总线APB1的时钟信号)等于HCLK的一半，由时钟系统框图可知AHB预分频器置为2（二分频），由STM32中文手册时钟配置寄存器(RCC_CFGR)可知其8-10位应为100，所以RCC-&gt;CFGR |&#x3D;0x00000400,也就是0000 0000 0000 0000 0000 0100 0000 0000，而事实上：</p><pre><code>#define  RCC_CFGR_PPRE1_DIV2       ((uint32_t)0x00000400)        /*!&lt; HCLK divided by 2 */</code></pre><h3 id="2-4-2-系统时钟源的选择"><a href="#2-4-2-系统时钟源的选择" class="headerlink" title="2.4.2-系统时钟源的选择"></a>2.4.2-系统时钟源的选择</h3><pre><code>#else/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */    RCC-&gt;CFGR &amp;= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |                                        RCC_CFGR_PLLMULL));    RCC-&gt;CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);</code></pre><p>该段代码将外部高速时钟源不分频再经锁相环9倍频成为72M系统时钟源。</p><pre><code>/* Enable PLL */    RCC-&gt;CR |= RCC_CR_PLLON;    /* Wait till PLL is ready */    while((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == 0)    &#123;    &#125;</code></pre><p>开启锁相环PLL,锁相环在SystemInit()函数中配置时钟控制寄存器(RCC_CR) 时已经关闭，因为在配置时钟配置寄存器(RCC_CFGR) 时很多位的写入需要将锁相环关闭。开启锁相环还需等待其返回PLL时钟就绪标志 (PLL clock ready flag)。<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/50d36d7865f08a2a00871f4349946c9.png"><br>选择PLL作为系统时钟源，并判断其系统时钟切换状态</p><pre><code> /* Select PLL as system clock source */    RCC-&gt;CFGR &amp;= (uint32_t)((uint32_t)~(RCC_CFGR_SW));    RCC-&gt;CFGR |= (uint32_t)RCC_CFGR_SW_PLL;        /* Wait till PLL is used as system clock source */    while ((RCC-&gt;CFGR &amp; (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)    &#123;    &#125;</code></pre><p><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/8f9688bffd8918a32ab1e774e703e86.png"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于GPIO三个寄存器：ODR、BSRR、BRR功能的理解</title>
      <link href="/2023/02/26/%E5%85%B3%E4%BA%8EGPIO%E4%B8%89%E4%B8%AA%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%9AODR%E3%80%81BSRR%E3%80%81BRR%E5%8A%9F%E8%83%BD%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2023/02/26/%E5%85%B3%E4%BA%8EGPIO%E4%B8%89%E4%B8%AA%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%9AODR%E3%80%81BSRR%E3%80%81BRR%E5%8A%9F%E8%83%BD%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>首先ODR、BSRR、BRR三个寄存器都能控制引脚输出高低电平，它们在使用规则以及简易程度上有所不同。</p><h1 id="ODR"><a href="#ODR" class="headerlink" title="ODR"></a>ODR</h1><p>ODR：输出端口寄存器 Output data register。ODR寄存器, 控制管脚的高、低电平，低16位有效，写1高电平，写0低电平。具体如图所示：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1f35b69b1c4b6984db6ebf4eed65336.png"><br>我们可以采用如下代码实现GPIO的0引脚交替输出高低电平：</p><pre><code>GPIOB-&gt;ODR |=(1&lt;&lt;0);Delay(0xFFFFF);GPIOB-&gt;ODR = 0;Delay(0xFFFFF);</code></pre><h1 id="BSRR"><a href="#BSRR" class="headerlink" title="BSRR"></a>BSRR</h1><p>BSRR寄存器, 控制管脚的高、低电平，32位有效，低16位写1 高电平，高16位写1 低电平。具体如图所示：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b96dde7fd93a54382d278cd0046b9a0.png"><br>在stm32f10x_gpio.c文件中给出了它的使用方法：</p><pre><code>void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)&#123;  /* Check the parameters */   assert_param(IS_GPIO_ALL_PERIPH(GPIOx));  assert_param(IS_GPIO_PIN(GPIO_Pin));  GPIOx-&gt;BSRR = GPIO_Pin;&#125;</code></pre><p>GPIO_SetBits函数是用来使对应引脚输出高电平，这里的assert是断言，用来判断输入的参数是否合法。为什么将对应引脚”GPIO_Pin”(16位)赋值给BSRR就能使其输入高电平呢？<br>这个问题困扰了我蛮久，直到我查找了stm32f10x_gpio.h文件中对0~15个引脚的的定义就明白了，如图：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b682ea84bf422867c05320929500387.png"><br>比如这里对低13号引脚的定义，不是将13简单的转化为二进制1101，而是将16个位置上的第14位置1，其他位置0，即：<br>0010 0000 0000 0000<br>转化成十六进制就是0x2000，这样将该引脚的16位赋值给BSRR的低十六位时，就能保证在13引脚被赋值1，其他引脚赋值0，再根据BSRR的使用特点知13引脚输出高电平，其他引脚不变。<br>我们利用BSRR的高16位，采用如下代码就可以实现对应GPIO引脚输出低电平。</p><pre><code>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)&#123;  /* Check the parameters */  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));  assert_param(IS_GPIO_PIN(GPIO_Pin));    GPIOx-&gt;BSRR = (PIO_Pin&lt;&lt;16);&#125;</code></pre><p>如此看来，仅使用一个寄存器BSRR就可以使GPIO引脚输出高低电平，实时也是如此，F1和F4系列都有ODR和BSRR，但F4 取消了BRR。所以为了代码通用，尽量不使用BRR，反正BSRR能完成。  </p><h1 id="BRR"><a href="#BRR" class="headerlink" title="BRR"></a>BRR</h1><p>BRR寄存器, 控制管脚的低电平，低16位有效，写1 低电平。具体如图所示<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/c2434bad7a8843ceabad643ba2d76e2.png"><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a5233e2228d2c96e785cb8ad078ddd5.png"><br>在stm32f10x_gpio.c文件中给出了它的使用方法：</p><pre><code>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)&#123;  /* Check the parameters */  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));  assert_param(IS_GPIO_PIN(GPIO_Pin));    GPIOx-&gt;BRR = GPIO_Pin;&#125;</code></pre><p>GPIO_ResetBits函数是用来使对应引脚输出低电平，分析方法与GPIO_SetBits函数使对应引脚输出低电平类似，不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机常见英文缩写</title>
      <link href="/2023/02/25/%E5%8D%95%E7%89%87%E6%9C%BA%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87%E7%BC%A9%E5%86%99/"/>
      <url>/2023/02/25/%E5%8D%95%E7%89%87%E6%9C%BA%E5%B8%B8%E8%A7%81%E8%8B%B1%E6%96%87%E7%BC%A9%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>RCC:        振荡－阻塞变换器         Ringing Choke(阻塞) Converter<br>APB:        外围总线                Advanced Peripheral(外围的) Bus<br>GPIO:        通用输入&#x2F;输出                 General Purpose Input Output<br>HSE Osc:                        High Speed External Oscillator(振荡器)<br>AHB:        高级高性能总线                Advanced High performance Bus<br>PLL:          锁相环                        Phase Locked Loop<br>FWLib:        固件库                        Firmware Library<br>TVS：        瞬态电压抑制器        Transient Voltage Suppressor<br>CMRR:        共模抑制比<br>CRL          端口配置低寄存器     configuration registe low<br>CRH          端口配置高寄存器     configuration registe high<br>ODR：        输出端口寄存器       Output data register<br>NVIC:        嵌套向量中断控制器  Nested Vectored Interrupt Controller (NVIC)<br>TDI:        传输驱动程序接口         Transport Driver(驱动) Interface(接口)<br>ROM：       只读存储器                   Read Only Memory<br>RAM:         随机存储器               Random Access Memory<br>MCU：        微控制单元                Microcontroller Unit<br>IEEE：      电气和电子工程师协会        Institute of Electrical and Electronics     Engineers<br>ADC：       模数变换器                        Analog-to-Digital Converter<br>SPI：       串行外设接口                Serial Peripheral Interface<br>PWM：       脉冲宽度调制                 Pulse Width Modulation<br>USART：通用同步异步收发机        Universal Synchronous Asynchronous Receiver   Transmitter<br>IRQ：中断请求                        Interrupt Request<br>RTC：实时时钟                        Real-Time Clock<br>DMA ：直接存储器访问                Direct Memory Access<br>SDIO：安全数字输入输出卡        Secure Digital Input and Output Card<br>TXD:发送数据                        Transmit(tx) Data<br>RXD:接收数据                        Receive(rx) Data<br>out_pp      推挽输出                       push put<br>HSE         高速外部时钟信号            High Speed External Clock signal<br>RCC         时钟控制                    reset and clock control<br>NVIC        嵌套中断向量控制器                          Nested Vectored interrupt</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电解水实验</title>
      <link href="/2023/02/23/%E7%94%B5%E8%A7%A3%E6%B0%B4%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/02/23/%E7%94%B5%E8%A7%A3%E6%B0%B4%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>点击视频：<img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/1bd11a265a4d38237ab061f8bc8065bd.mp4"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈琐碎 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>水果电池实验</title>
      <link href="/2023/02/23/%E6%B0%B4%E6%9E%9C%E7%94%B5%E6%B1%A0%E5%AE%9E%E9%AA%8C/"/>
      <url>/2023/02/23/%E6%B0%B4%E6%9E%9C%E7%94%B5%E6%B1%A0%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>材料：4个柠檬、铜片、锌片、LED灯、若干导线<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/61efb300458ec44f8b40847ea4cdfa3.jpg"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/8a6937fb98abf0b1e53e6109d388fc9.jpg"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/3cddb52eae44093c5f55534ec6da685.jpg"><br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/28504674a2c9e1226fc4bd8caa70df4.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈琐碎 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>stm32相邻寄存器地址差4</title>
      <link href="/2023/02/22/stm32%E7%9B%B8%E9%82%BB%E5%AF%84%E5%AD%98%E5%99%A8%E5%9C%B0%E5%9D%80%E5%B7%AE4/"/>
      <url>/2023/02/22/stm32%E7%9B%B8%E9%82%BB%E5%AF%84%E5%AD%98%E5%99%A8%E5%9C%B0%E5%9D%80%E5%B7%AE4/</url>
      
        <content type="html"><![CDATA[<p>stm32是32位CPU,CPU内部及外部一次最多可处理32位二进制数据，内存总线也是32位。<br>单片机的内存单元是一个字节，也就是8bite。CPU一次读取数据就要读取32位数据，也就是4字节，读取一个寄存器的信息，所以一个寄存器应占有4字节。<br>注意：寄存器地址！&#x3D;内存地址，寄存器地址只是内存空间的编号，他不占用寄存器的物理空间，根据这个编号CPU可以改变寄存器内部的实参（利用指针）。stm32能表示4GB的内存空间，并不意味着它有$2^{32}$个地址，实际理论上只有$2^{16}$个地址。<br>而正因为寄存器的地址偏移4，如果定义一个寄存器的类型为(unsigned int)就正好在内存中占据4个字节，而一个内存单元就是一个字节，分配一个地址，那4个字节就正好每次偏移4个地址，而且又符合结构体的内对其，所以我们常将寄存器定义在一个结构体中，通过访问&#x2F;赋值结构体成员来访问&#x2F;赋值寄存器。如图所示：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/51af7831294100c41a786bba9ca7dd5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机寄存器的理解</title>
      <link href="/2022/11/30/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2022/11/30/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="单片机芯片的结构"><a href="#单片机芯片的结构" class="headerlink" title="单片机芯片的结构"></a>单片机芯片的结构</h1><p>单片机上的芯片并不是我们传统意义上理解的芯片，而是集成了很多其他的外设。这些外设是必不可少的，所以干脆把他们集成在一起封装好，片上系统（SoC：System-on-a-chip）也由此而来。<br>下图是STM32F103VET6的引脚图：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/731e4053ae3261ecb7b8c3e68fc1277.png"></p><p>事实上他内部是这样的：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/72b41bd8db722c134a9f5031dc6a274.png"></p><p>我们看到的 STM32 芯片是已经封装好的成品，主要由内核和片上外设组成。若与电脑类比，内核与外设就如同电脑上的 CPU 与主板、内存、显卡、硬盘的关系。STM32F103 采用的是 Cortex-M3 内核，内核即 CPU，由 ARM 公司设计。ARM 公司并不生产芯片，而是出售其芯片技术授权。芯片生产厂商 (SOC) 如 ST、TI、Freescale，负责在内核之外设计部件并生产整个芯片，这些内核之外的部件被称为核外外设或片上外设。如 GPIO、USART（串<br>口）、I2C、SPI 等都叫做片上外设。</p><h1 id="寄存器作用"><a href="#寄存器作用" class="headerlink" title="寄存器作用"></a>寄存器作用</h1><p>单片机的内核负责程序运算、对外设的读写等功能。但是内核并不知道外设在哪里，所以需要对外设进行地址编码。STM32是32位，也就是有32根地址线，能表示0~$2^{32}$地址范围(4G)。如图所示:<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/a1ac04bdfb1e6038673bbf9015794d5.png"></p><p>CPU可以通过地址来访问这些地址所对应的外设(GPIO、UART、FLASH)，我们以STM32的GPIO为例来看看CPU是如何驱动外设的。GPIO(通用输入输出,General Purpose Input&#x2F;Output),它是一类输入输出端口，又能分为GPIOA~GPIOE等5组,每一组又对外提供16个引脚，所以属于GPIO的引脚一共有5*16&#x3D;80个引脚。如图所示是GPIOB的16个引脚：<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/05d4cc403fd3c31c8fcc21448787e8a.png"></p><p>每一组GPIO有多个寄存器和硬件控制器(驱动器)，寄存器应该理解成一种存储器，并且像FLASH外设一样拥有一个自己唯一的地址，CPU可以通过这些地址找到这个寄存器，并向该寄存器写入信息(STM32的寄存器有32位，所以CPU可以向寄存器写入32位信息，每一位都有其代表的意义，具体要查数据手册)，也能供CPU读取信息。CPU通过向寄存器写入信息，寄存器控制硬件控制器(驱动器)通过引脚输出高低电平，从而实现了CPU对硬件的间接控制(不用CPU直接输出高低电平的原因是,CPU的驱动能力弱，带负载能力差，直接与设备相连会有烧坏或者无法工作)。寄存器因此得名，暂时寄存数据的存储器。</p>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mytest</title>
      <link href="/2022/11/28/mytest/"/>
      <url>/2022/11/28/mytest/</url>
      
        <content type="html"><![CDATA[<p>这是我的一个测试<br>首先插入一张照片<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b763ca7c840887d5b4961696d96b81ab.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一个博客</title>
      <link href="/2022/11/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/11/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>#这是我的第一篇博客<br>##不知道你是否能看见呢，当然一切都还只是在测试。<br>先插入一个图片试一试<br>再看一张图片<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/333.jpg"><br>第二张图片<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/b12adf97edf4a5ebd37ef1748af5106f.jpg"><br>第三张图片<br><img src="https://blogpicture123.oss-cn-qingdao.aliyuncs.com/picture/222.jpg"><br>这是<a href="https://baidu.com/">百度连接</a><br>再次写一个百度连接<a href="https://baidu.com/">https://baidu.com</a><br>这是markdown的语法大全<a href="https://blog.csdn.net/witnessai1/article/details/52551362?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166964456216782425681561%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166964456216782425681561&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-52551362-null-null.142%5Ev67%5Econtrol,201%5Ev3%5Econtrol,213%5Ev2%5Et3_control2&utm_term=markdown%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187">点击进入</a><br>质能守恒方程可以用一个很简洁的方程式 $E&#x3D;mc^2$ 来表达。</p><h1 id="这是一个以及标题"><a href="#这是一个以及标题" class="headerlink" title="这是一个以及标题"></a>这是一个以及标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>有序列表</p><ol><li>有序第一项</li><li>有序第二项</li></ol><p>无序列表</p><ul><li>无序列表第一项</li><li>无序列表第二项</li></ul><p><em>这是一段斜体</em></p><blockquote><p>区块引用<br>hfdjlwqhufrejgftjrefbnjlebhwgbrkjehfdgfbrkj;wafhkiherufdjabfejafhhafkghg<br>表格</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
